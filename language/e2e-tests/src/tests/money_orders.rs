// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

use crate::{
    account::{AccountData, AccountRoleSpecifier, lbr_currency_code},
    common_transactions::{
        initialize_money_orders_txn,
        issue_money_order_batch_txn,
        deposit_money_order_txn,
        cancel_money_order_txn,
    },
    executor::FakeExecutor,
    gas_costs, keygen::KeyGen
};
use compiled_stdlib::transaction_scripts::StdlibScript;
use libra_types::{
    account_config::{IssuedMoneyOrderEvent},
    transaction::TransactionStatus,
    account_config::{LBR_NAME},
    vm_status::{StatusCode, VMStatus},
    transaction::{TransactionArgument},
};
use std::convert::TryFrom;

#[test]
fn money_orders() {
    let mut executor = FakeExecutor::from_genesis_file();

    // Add issuer's account
    let (privkey, pubkey) = KeyGen::from_seed([9u8; 32]).generate_keypair();
    let issuer_account =
        AccountData::with_keypair(privkey,
                                  pubkey,
                                  1000,
                                  lbr_currency_code(),
                                  10,
                                  AccountRoleSpecifier::ParentVASP,);
    executor.add_account_data(&issuer_account);
    // println!("{}", issuer_account.address());
    // Addr is 5455a8193f1dfc1b113ecc54d067afe1

    // Add receiver's account    
    let (privkey, pubkey) = KeyGen::from_seed([7u8; 32]).generate_keypair();
    let receiver_account = 
        AccountData::with_keypair(privkey,
                                  pubkey,
                                  1000,
                                  lbr_currency_code(),
                                  10,
                                  AccountRoleSpecifier::ParentVASP,);
    executor.add_account_data(&receiver_account);
    // println!("{}", receiver_account.address());
    // Addr is ffccb556fc111b099569ce5d4af70906

    executor.new_block();
    let txn = initialize_money_orders_txn(
        &issuer_account.account(),
        [
            0xea, 0xe0, 0x9b, 0x09, 0x6c, 0xf4, 0x83, 0xb9, 0x92, 0xda, 0x46, 0x05, 0xcf, 0x5b,
            0x35, 0x91, 0xc9, 0xce, 0xf9, 0x61, 0xa2, 0x4f, 0x62, 0x9d, 0x4b, 0x62, 0x71, 0x5c,
            0x5a, 0x88, 0xd2, 0xa5,
        ].to_vec(),
        1000000,
        10,
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );

    let txn = issue_money_order_batch_txn(
        &issuer_account.account(),
        11,
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );
    let issued_events: Vec<_> = output
        .events()
        .iter()
        .filter_map(|event| IssuedMoneyOrderEvent::try_from(event).ok())
        .collect();
    assert_eq!(issued_events.len(), 1);

    let mut args: Vec<TransactionArgument> = Vec::new();
    args.push(TransactionArgument::U64(0));
    args.push(TransactionArgument::U64(2));
    let txn = issuer_account.account().create_signed_txn_with_args(
        StdlibScript::IssuerCancelMoneyOrder.compiled_bytes().into_vec(),
        vec![],
        args,
        12,
        gas_costs::TXN_RESERVED * 2,
        0,
        LBR_NAME.to_owned(),
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );

    let txn = deposit_money_order_txn(
        &receiver_account.account(),
        5,
        &issuer_account.account(),
        0,
        3,
        [
            0x59, 0x1c, 0xd7, 0xa9, 0x99, 0x67, 0xa7, 0x84, 0x1e, 0x0a, 0x6c, 0x14, 0x3a, 0x62,
            0xe5, 0x82, 0x79, 0x13, 0x0a, 0xb1, 0xd2, 0xb0, 0x92, 0xa2, 0x6e, 0x16, 0x8e, 0x8a,
            0x01, 0x61, 0x3e, 0x15,
        ].to_vec(),
        [
            0x54, 0xfb, 0x42, 0xa0, 0xa9, 0x17, 0x8d, 0xac, 0xf8, 0xb8, 0x53, 0x7f, 0x9d, 0x03,
            0x56, 0x38, 0xd6, 0xf6, 0xd6, 0x10, 0x6e, 0x0c, 0xbb, 0x81, 0x53, 0xd0, 0xcd, 0x1c,
            0x2c, 0x67, 0x0d, 0xe6, 0xfc, 0x23, 0xf6, 0x77, 0x72, 0xf6, 0x75, 0x63, 0x7e, 0xd6,
            0x3f, 0x5c, 0xaa, 0x69, 0x75, 0x36, 0x17, 0x9a, 0x02, 0xc0, 0x11, 0x91, 0x64, 0x1a,
            0x80, 0xda, 0x52, 0x5d, 0xf9, 0x21, 0xbd, 0x00,
        ].to_vec(),
        [
            0x34, 0x5e, 0x70, 0x51, 0xd0, 0x76, 0x29, 0x07, 0x79, 0x8a, 0xe2, 0x00, 0x9b, 0xc1,
            0x8a, 0x8c, 0x46, 0xb2, 0xa1, 0xf8, 0x01, 0x5f, 0x01, 0x0e, 0x1f, 0x5e, 0x33, 0x37,
            0x89, 0xa6, 0xf7, 0xa5, 0x37, 0x62, 0xe5, 0xb1, 0x24, 0xa6, 0x4f, 0x34, 0x27, 0x01,
            0xce, 0x4d, 0xaf, 0x13, 0x05, 0x17, 0xd0, 0x34, 0x7c, 0x13, 0x60, 0xb1, 0xce, 0xa2,
            0x0f, 0x6c, 0x40, 0x4b, 0x12, 0x81, 0x2a, 0x0d,
        ].to_vec(),
        10,
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );

    let txn = cancel_money_order_txn(
        &receiver_account.account(),
        5,
        &issuer_account.account(),
        0,
        4,
        [
            0xfe, 0x3e, 0x4f, 0x8d, 0x26, 0x06, 0xab, 0x21, 0xae, 0x9c, 0x8b, 0xbc, 0xe1, 0x08,
            0x4b, 0x1d, 0x4f, 0x12, 0x02, 0x3c, 0xd7, 0x4a, 0xc6, 0x2e, 0xfc, 0x35, 0xd2, 0x8a,
            0xd1, 0xbf, 0xc8, 0x44,
        ].to_vec(),
        [
            0xb1, 0x89, 0x19, 0x29, 0xd9, 0x6b, 0x5d, 0x8a, 0x55, 0xd3, 0x24, 0x8c, 0x67, 0xd9,
            0xc7, 0x20, 0x62, 0x0f, 0xd8, 0x0e, 0x79, 0xb3, 0x2b, 0xfb, 0x9d, 0xb6, 0x77, 0x2f,
            0xd4, 0xda, 0xdb, 0xac, 0x1a, 0xdf, 0xb0, 0x40, 0xb5, 0x69, 0xd7, 0xb8, 0x02, 0x8f,
            0x7f, 0xc2, 0x52, 0x15, 0x74, 0x71, 0x83, 0xf1, 0x39, 0x85, 0xab, 0xe2, 0x2c, 0xdd,
            0x0c, 0x5b, 0x50, 0x5d, 0x5a, 0xe2, 0xee, 0x0d,
        ].to_vec(),
        [
            0x85, 0x98, 0x2a, 0xb9, 0xf2, 0xc0, 0x7d, 0x73, 0x9a, 0x1a, 0xd7, 0x0a, 0xe4, 0x6a,
            0x4c, 0x93, 0x62, 0xdf, 0xb2, 0x26, 0xb9, 0x27, 0x91, 0x81, 0xe2, 0xfa, 0xac, 0xce,
            0x19, 0xaa, 0xd2, 0xe4, 0xbb, 0x8b, 0x9a, 0x2d, 0x41, 0x10, 0x63, 0xf0, 0x95, 0x1a,
            0x8f, 0x8e, 0xf6, 0xd4, 0x4c, 0x83, 0x3b, 0x49, 0x28, 0x63, 0x1d, 0x9d, 0x5e, 0xf2,
            0x73, 0x32, 0xf8, 0x70, 0x7d, 0xe7, 0xb9, 0x0c,
        ].to_vec(),
        11,
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );

    // Wrong user signature
    let txn = cancel_money_order_txn(
        &receiver_account.account(),
        5,
        &issuer_account.account(),
        1,
        7,
        [
            0xfe, 0x3e, 0x4f, 0x8d, 0x26, 0x06, 0xab, 0x21, 0xae, 0x9c, 0x8b, 0xbc, 0xe1, 0x08,
            0x4b, 0x1d, 0x4f, 0x12, 0x02, 0x3c, 0xd7, 0x4a, 0xc6, 0x2e, 0xfc, 0x35, 0xd2, 0x8a,
            0xd1, 0xbf, 0xc8, 0x44,
        ].to_vec(),
        [
            0xb1, 0x89, 0x19, 0x29, 0xd9, 0x6b, 0x5d, 0x8a, 0x55, 0xd3, 0x24, 0x8c, 0x67, 0xd9,
            0xc7, 0x20, 0x62, 0x0f, 0xd8, 0x0e, 0x79, 0xb3, 0x2b, 0xfb, 0x9d, 0xb6, 0x77, 0x2f,
            0xd4, 0xda, 0xdb, 0xac, 0x1a, 0xdf, 0xb0, 0x40, 0xb5, 0x69, 0xd7, 0xb8, 0x02, 0x8f,
            0x7f, 0xc2, 0x52, 0x15, 0x74, 0x71, 0x83, 0xf1, 0x39, 0x85, 0xab, 0xe2, 0x2c, 0xdd,
            0x0c, 0x5b, 0x50, 0x5d, 0x5a, 0xe2, 0xee, 0x0d,
        ].to_vec(),
        [
            0x85, 0x98, 0x2a, 0xb9, 0xf2, 0xc0, 0x7d, 0x73, 0x9a, 0x1a, 0xd7, 0x0a, 0xe4, 0x6a,
            0x4c, 0x93, 0x62, 0xdf, 0xb2, 0x26, 0xb9, 0x27, 0x91, 0x81, 0xe2, 0xfa, 0xac, 0xce,
            0x19, 0xaa, 0xd2, 0xe4, 0xbb, 0x8b, 0x9a, 0x2d, 0x41, 0x10, 0x63, 0xf0, 0x95, 0x1a,
            0x8f, 0x8e, 0xf6, 0xd4, 0x4c, 0x83, 0x3b, 0x49, 0x28, 0x63, 0x1d, 0x9d, 0x5e, 0xf2,
            0x73, 0x32, 0xf8, 0x70, 0x7d, 0xe7, 0xb9, 0x0c,
        ].to_vec(),
        12,
    );
    let output = executor.execute_transaction(txn);
    assert_eq!(
        output.status().vm_status().major_status,
        StatusCode::ABORTED
    );
    assert_eq!(output.status().vm_status().sub_status, Some(8002));

    // Already (issuer) canceled.
    let txn = deposit_money_order_txn(
        &receiver_account.account(),
        5,
        &issuer_account.account(),
        0,
        2,
        [
            0x39, 0x97, 0xac, 0xd1, 0x34, 0x4e, 0xd8, 0x3c, 0xa3, 0xa1, 0x56, 0x78, 0x3c, 0xfc,
            0x7f, 0x55, 0xc6, 0xc2, 0xfb, 0x8f, 0x5c, 0x14, 0x27, 0x61, 0x79, 0x1d, 0xe8, 0x7f,
            0x1c, 0x32, 0x12, 0xd7,
        ].to_vec(),
        [
            0x0c, 0xab, 0xb9, 0x36, 0x02, 0x68, 0x29, 0x0f, 0x43, 0x8f, 0x21, 0x0a, 0x2e, 0x3c,
            0xd9, 0x19, 0x59, 0x34, 0xc1, 0x93, 0x2f, 0xba, 0x4c, 0x03, 0x31, 0xa7, 0x40, 0xff,
            0x22, 0xc1, 0x43, 0xbc, 0x8a, 0x17, 0x1a, 0xbc, 0x0c, 0x58, 0x05, 0x85, 0x33, 0xc9,
            0xe5, 0xac, 0xf9, 0x83, 0x60, 0xd6, 0x91, 0x00, 0x25, 0xed, 0x80, 0x87, 0xda, 0xee,
            0x20, 0x34, 0x5b, 0x02, 0x57, 0x4a, 0xc0, 0x08,
        ].to_vec(),
        [
            0xe5, 0xd2, 0x27, 0x43, 0x1e, 0xc8, 0xcd, 0xf4, 0xbd, 0x90, 0x59, 0xbb, 0xa7, 0xd5,
            0x3f, 0x79, 0xbc, 0xd6, 0x2f, 0x75, 0x8b, 0x74, 0x0c, 0xb5, 0xb8, 0xf7, 0x1d, 0x60,
            0x4e, 0x8c, 0x10, 0xf8, 0xef, 0x1d, 0xf3, 0x7c, 0xe5, 0x86, 0x76, 0x31, 0x2f, 0x88,
            0x71, 0x5c, 0x22, 0x6c, 0x17, 0x28, 0x2f, 0x9a, 0x30, 0x67, 0x5e, 0x31, 0x3d, 0xc8,
            0xad, 0x35, 0x2f, 0xfb, 0x74, 0x35, 0x25, 0x0f,
        ].to_vec(),
        12,
    );
    let output = executor.execute_transaction(txn);
       assert_eq!(
        output.status().vm_status().major_status,
        StatusCode::ABORTED
    );
    assert_eq!(output.status().vm_status().sub_status, Some(8003));

    // Cancel deposited - does nothing, but doesn't abort.
    // TODO: check the cancel event that cancel didn't do anything.
    let txn = cancel_money_order_txn(
        &receiver_account.account(),
        5,
        &issuer_account.account(),
        0,
        3,
        [
            0x94, 0xc5, 0x62, 0x19, 0x46, 0xed, 0x32, 0x8f, 0x2b, 0x3d, 0x3b, 0x6e, 0xc2, 0x4a,
            0x08, 0x75, 0xaf, 0x62, 0xcc, 0xda, 0x9c, 0x24, 0xeb, 0x1f, 0xe8, 0xed, 0xf5, 0xf9,
            0x1f, 0x4c, 0x07, 0xde,
        ].to_vec(),
        [
            0xf0, 0x07, 0xa4, 0x4b, 0xb3, 0xc0, 0xb3, 0x6a, 0x34, 0x91, 0xf7, 0x07, 0x8b, 0xb1,
            0xf9, 0xb3, 0x07, 0x60, 0x27, 0xf0, 0x3f, 0x21, 0x7f, 0x5d, 0xa4, 0xc1, 0x9c, 0xbc,
            0x78, 0xad, 0x5a, 0x75, 0x37, 0xa1, 0x57, 0x02, 0xda, 0xb0, 0x28, 0x20, 0xb1, 0x28,
            0x49, 0xdb, 0x68, 0x98, 0xc6, 0x2c, 0x98, 0xf3, 0xb1, 0x17, 0x6a, 0x03, 0x2a, 0xc7,
            0x98, 0x25, 0xa4, 0x64, 0x51, 0xa9, 0x30, 0x0c,
        ].to_vec(),
        [
            0xdd, 0x68, 0xeb, 0x5c, 0xb0, 0x4d, 0x8e, 0x09, 0xee, 0x18, 0xe0, 0xe1, 0x40, 0xaa,
            0x94, 0x3b, 0x49, 0x60, 0x3e, 0xd3, 0xf7, 0x1b, 0x8e, 0x41, 0x69, 0xcb, 0x6c, 0x9d,
            0xc1, 0xa6, 0xbe, 0xf3, 0x99, 0x5d, 0x88, 0x49, 0x08, 0xc4, 0x67, 0x1f, 0x08, 0xc3,
            0x14, 0x50, 0x4c, 0xce, 0xb0, 0x9f, 0xb3, 0x68, 0x05, 0xbe, 0x70, 0xd6, 0x65, 0x07,
            0xe4, 0x20, 0x98, 0x59, 0x62, 0x7e, 0x95, 0x03,
        ].to_vec(),
        12,
    );
    let output = executor.execute_and_apply(txn);
    assert_eq!(
        output.status(),
        &TransactionStatus::Keep(VMStatus::new(StatusCode::EXECUTED))
    );
}

